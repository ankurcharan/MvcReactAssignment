{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\prerna.c\\\\Downloads\\\\mvcreact-main (1)\\\\mvcreact-main\\\\MvcReactAssignment\\\\ReactModelPage\\\\src\\\\component\\\\CityVersionBox.js\";\nimport React from \"react\";\nimport '../App.css';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { mapDispatchToProps, mapStateToProps } from '../Actions/cityAction';\n\nclass CityVersionBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.OpenLocationPopUp = () => {\n      this.props.changeEntityFlag(true, this.state.selectedLocation, \"Location\");\n    };\n\n    this.OpenVersionPopUp = () => {\n      this.props.changeEntityFlag(true, this.state.selectedVersion, \"Version\");\n    };\n\n    this.state = {\n      popupName: ['Version', 'City'],\n      selectedLocation: props.selectedLocation,\n      selectedVersion: props.selectedVersion,\n      id: props.id\n    };\n  }\n\n  render() {\n    const {\n      selectedLocation,\n      changeEntityFlag,\n      selectedVersion\n    } = this.props;\n\n    if (!changeEntityFlag || !selectedLocation || !selectedVersion) {\n      return null;\n    }\n\n    const popups = this.state.popupName.map(popup => {\n      if (popup === \"Version\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            margin: \"0 20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"version\",\n            children: popup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: this.OpenVersionPopUp,\n            children: [\" \", this.state.selectedVersion.versionName]\n          }, popup, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            margin: \"0 20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"version\",\n            children: popup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: this.OpenLocationPopUp,\n            children: [\" \", this.state.selectedLocation]\n          }, popup, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popUpContainer\",\n      \"test-data\": \"popUpContainer\",\n      children: popups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCityVersionBox.propTypes = {\n  selectedLocation: PropTypes.string,\n  changeEntityFlag: PropTypes.func,\n  selectedVersion: PropTypes.shape({\n    CompanyId: PropTypes.number,\n    CompanyName: PropTypes.string,\n    ModelId: PropTypes.number,\n    ModelName: PropTypes.string,\n    Rating: PropTypes.number,\n    VersionId: PropTypes.number,\n    ImageUrl: PropTypes.string,\n    VersionName: PropTypes.string,\n    Price: PropTypes.number\n  })\n};\nexport default CityVersionBox;\nexport const CityVersionBoxConnect = connect(mapStateToProps, mapDispatchToProps)(CityVersionBox);","map":{"version":3,"sources":["C:/Users/prerna.c/Downloads/mvcreact-main (1)/mvcreact-main/MvcReactAssignment/ReactModelPage/src/component/CityVersionBox.js"],"names":["React","PropTypes","connect","mapDispatchToProps","mapStateToProps","CityVersionBox","Component","constructor","props","OpenLocationPopUp","changeEntityFlag","state","selectedLocation","OpenVersionPopUp","selectedVersion","popupName","id","render","popups","map","popup","display","margin","versionName","propTypes","string","func","shape","CompanyId","number","CompanyName","ModelId","ModelName","Rating","VersionId","ImageUrl","VersionName","Price","CityVersionBoxConnect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport '../App.css';\nimport PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\n\n\n\nimport { mapDispatchToProps, mapStateToProps } from '../Actions/cityAction'\n\nclass CityVersionBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      popupName: ['Version', 'City'],\n      selectedLocation: props.selectedLocation,\n      selectedVersion: props.selectedVersion,\n      id: props.id\n    }\n  }\n\n  OpenLocationPopUp = () => {\n    this.props.changeEntityFlag(true, this.state.selectedLocation, \"Location\");\n  }\n\n  OpenVersionPopUp = () => {\n    this.props.changeEntityFlag(true, this.state.selectedVersion, \"Version\");\n  }\n\n\n\n  render() {\n    const { selectedLocation, changeEntityFlag, selectedVersion } = this.props;\n\n    if (!changeEntityFlag || !selectedLocation || !selectedVersion) {\n      return null;\n    }\n\n\n    const popups = this.state.popupName.map(popup => {\n      if (popup === \"Version\") {\n        return (\n          <div style={{ display: \"inline-block\", margin: \"0 20px\" }}>\n\n            <div className=\"version\">{popup}</div>\n            <button className=\"button\" key={popup} onClick={this.OpenVersionPopUp} > {this.state.selectedVersion.versionName}</button>\n\n          </div>\n\n        )\n      }\n      else {\n        return (\n\n          <div style={{ display: \"inline-block\", margin: \"0 20px\" }}>\n\n            <div className=\"version\">{popup}</div>\n            <button className=\"button\" key={popup} onClick={this.OpenLocationPopUp} > {this.state.selectedLocation}</button>\n\n          </div>\n        )\n      }\n\n\n    })\n    return (\n      <div className=\"popUpContainer\" test-data=\"popUpContainer\">\n        {popups}\n      </div>\n    );\n  }\n\n}\n\nCityVersionBox.propTypes = {\n  selectedLocation: PropTypes.string,\n  changeEntityFlag: PropTypes.func,\n  selectedVersion: PropTypes.shape({\n    CompanyId: PropTypes.number,\n    CompanyName: PropTypes.string,\n    ModelId: PropTypes.number,\n    ModelName: PropTypes.string,\n    Rating: PropTypes.number,\n    VersionId: PropTypes.number,\n    ImageUrl: PropTypes.string,\n    VersionName: PropTypes.string,\n    Price: PropTypes.number\n  })\n}\n\n\nexport default CityVersionBox;\n\nexport const CityVersionBoxConnect = connect(mapStateToProps, mapDispatchToProps)(CityVersionBox);\n"]},"metadata":{},"sourceType":"module"}