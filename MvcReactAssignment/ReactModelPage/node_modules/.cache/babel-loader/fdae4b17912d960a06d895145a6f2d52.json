{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\reactmvc\\\\MvcReactAssignment\\\\ReactModelPage\\\\src\\\\component\\\\Rating.js\";\nimport React from 'react';\nexport default function Rating(props) {\n  const {\n    RatingValue,\n    MaxRating\n  } = props;\n  console.log(RatingValue);\n  let RatingArr = [];\n\n  for (let i = 0; i < MaxRating; i++) {\n    if (i < RatingValue) RatingArr.push(\"star\");else RatingArr.push(\"nv\");\n  }\n\n  return RatingArr.map((rating, index) => {\n    return rating === \"star\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"fa fa-star star\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 41\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"fa fa-star nv\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 101\n    }, this);\n  });\n}\n_c = Rating;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rating\");","map":{"version":3,"sources":["D:/reactmvc/MvcReactAssignment/ReactModelPage/src/component/Rating.js"],"names":["React","Rating","props","RatingValue","MaxRating","console","log","RatingArr","i","push","map","rating","index"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAClC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BF,KAAnC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,MAAII,SAAS,GAAG,EAAhB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,SAAnB,EAA8BI,CAAC,EAA/B,EAAmC;AAC/B,QAAGA,CAAC,GAAGL,WAAP,EACII,SAAS,CAACE,IAAV,CAAe,MAAf,EADJ,KAGIF,SAAS,CAACE,IAAV,CAAe,IAAf;AACP;;AACD,SACIF,SAAS,CAACG,GAAV,CAAc,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC7B,WAAOD,MAAM,KAAK,MAAX,gBAAqB;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA,YAArB,gBAAiF;AAAoB,MAAA,SAAS,EAAC;AAA9B,OAAaA,KAAb;AAAA;AAAA;AAAA;AAAA,YAAxF;AACH,GAFD,CADJ;AAKH;KAfuBX,M","sourcesContent":["import React from 'react'\n\nexport default function Rating(props) {\n    const { RatingValue, MaxRating } = props;\n    console.log(RatingValue);\n    let RatingArr = [];\n    for(let i = 0; i < MaxRating; i++) {\n        if(i < RatingValue)\n            RatingArr.push(\"star\");\n        else\n            RatingArr.push(\"nv\");\n    }\n    return (\n        RatingArr.map((rating, index) => {\n            return rating === \"star\" ? (<span className=\"fa fa-star star\" key = {index}></span>) : (<span key = {index} className=\"fa fa-star nv\"></span>); \n        })\n    )\n}\n"]},"metadata":{},"sourceType":"module"}