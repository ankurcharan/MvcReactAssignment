{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\prerna.c\\\\Downloads\\\\mvcreact-main (1)\\\\mvcreact-main\\\\MvcReactAssignment\\\\ReactModelPage\\\\src\\\\component\\\\CommonPopUp.js\";\nimport React from \"react\";\nimport '../App.css';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { mapDispatchToProps, mapStateToProps } from '../Actions/cityAction';\n\nclass CommonPopUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeEntityDetails = e => {\n      var entityName = e.target.innerHTML;\n\n      if (this.state.popUpType === \"Location\") {\n        this.props.changeCityName(entityName);\n      }\n\n      this.props.changeEntityFlag(false, entityName, this.state.popUpType, this.state.id);\n    };\n\n    this.state = {\n      popUpType: props.popUpType,\n      popUpVisible: true,\n      entityList: props.entityList,\n      id: this.props.id\n    };\n  }\n\n  render() {\n    const entities = this.state.entityList.map(entity => {\n      if (this.state.popUpVisible) {\n        if (this.state.popUpType === \"Version\") {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              whiteSpace: \"nowrap\"\n            },\n            onClick: this.changeEntityDetails,\n            children: entity.versionName\n          }, entity.versionId + \"_\" + entity.versionName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this);\n        }\n\n        if (this.state.popUpType === \"Model\") {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              whiteSpace: \"nowrap\"\n            },\n            onClick: this.changeEntityDetails,\n            children: entity.modelName\n          }, entity.modelId + \"_\" + entity.modelName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              whiteSpace: \"nowrap\"\n            },\n            onClick: this.changeEntityDetails,\n            children: entity\n          }, entity, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this);\n        }\n      } else {\n        return '';\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-test\": \"commonpopup\",\n      children: entities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCommonPopUp.propTypes = {\n  popUpType: PropTypes.string,\n  changeEntityFlag: PropTypes.func,\n  entityList: PropTypes.arrayOf(PropTypes.shape({\n    CompanyId: PropTypes.number,\n    CompanyName: PropTypes.string,\n    ModelId: PropTypes.number,\n    ModelName: PropTypes.string,\n    Rating: PropTypes.number,\n    VersionId: PropTypes.number,\n    ImageUrl: PropTypes.string,\n    VersionName: PropTypes.string,\n    Price: PropTypes.number\n  }) || PropTypes.arrayOf(PropTypes.shape({\n    locations: PropTypes.string\n  }))),\n  selectedEntity: PropTypes.arrayOf(PropTypes.shape({\n    CompanyId: PropTypes.number,\n    CompanyName: PropTypes.string,\n    ModelId: PropTypes.number,\n    ModelName: PropTypes.string,\n    Rating: PropTypes.number,\n    VersionId: PropTypes.number,\n    ImageUrl: PropTypes.string,\n    VersionName: PropTypes.string,\n    Price: PropTypes.number\n  }) || PropTypes.arrayOf(PropTypes.shape({\n    locations: PropTypes.string\n  }))),\n  popUpVisible: PropTypes.bool\n};\nexport default CommonPopUp;\nexport const CommonPopUpConnect = connect(mapStateToProps, mapDispatchToProps)(CommonPopUp);","map":{"version":3,"sources":["C:/Users/prerna.c/Downloads/mvcreact-main (1)/mvcreact-main/MvcReactAssignment/ReactModelPage/src/component/CommonPopUp.js"],"names":["React","PropTypes","connect","mapDispatchToProps","mapStateToProps","CommonPopUp","Component","constructor","props","changeEntityDetails","e","entityName","target","innerHTML","state","popUpType","changeCityName","changeEntityFlag","id","popUpVisible","entityList","render","entities","map","entity","whiteSpace","versionName","versionId","modelName","modelId","propTypes","string","func","arrayOf","shape","CompanyId","number","CompanyName","ModelId","ModelName","Rating","VersionId","ImageUrl","VersionName","Price","locations","selectedEntity","bool","CommonPopUpConnect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport '../App.css';\nimport PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\n\n\nimport { mapDispatchToProps, mapStateToProps } from '../Actions/cityAction'\n\nclass CommonPopUp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      popUpType: props.popUpType,\n      popUpVisible: true,\n      entityList: props.entityList,\n      id: this.props.id\n    };\n  }\n\n  changeEntityDetails = (e) => {\n    var entityName = e.target.innerHTML\n    if (this.state.popUpType === \"Location\") {\n      this.props.changeCityName(entityName);\n    }\n    this.props.changeEntityFlag(false, entityName, this.state.popUpType, this.state.id);\n  }\n\n  render() {\n    const entities = this.state.entityList.map(entity => {\n      if (this.state.popUpVisible) {\n        if (this.state.popUpType === \"Version\") {\n          return (\n            <p style={{ whiteSpace: \"nowrap\" }} onClick={this.changeEntityDetails} key={entity.versionId + \"_\" + entity.versionName}>{entity.versionName}</p>\n          )\n        }\n        if (this.state.popUpType === \"Model\") {\n          return (\n            <p style={{ whiteSpace: \"nowrap\" }} onClick={this.changeEntityDetails} key={entity.modelId + \"_\" + entity.modelName}>{entity.modelName}</p>\n          )\n        }\n        else {\n          return (\n            <p style={{ whiteSpace: \"nowrap\" }} onClick={this.changeEntityDetails} key={entity}>{entity}</p>\n          )\n        }\n      }\n      else {\n        return (\n          ''\n        )\n      }\n    });\n    return (\n      <div data-test=\"commonpopup\">\n        {entities}\n      </div>\n    );\n  }\n}\n\nCommonPopUp.propTypes = {\n  popUpType: PropTypes.string,\n  changeEntityFlag: PropTypes.func,\n  entityList: PropTypes.arrayOf(PropTypes.shape({\n    CompanyId: PropTypes.number,\n    CompanyName: PropTypes.string,\n    ModelId: PropTypes.number,\n    ModelName: PropTypes.string,\n    Rating: PropTypes.number,\n    VersionId: PropTypes.number,\n    ImageUrl: PropTypes.string,\n    VersionName: PropTypes.string,\n    Price: PropTypes.number\n  }) || PropTypes.arrayOf(PropTypes.shape({\n    locations: PropTypes.string\n  }))),\n  selectedEntity: PropTypes.arrayOf(PropTypes.shape({\n    CompanyId: PropTypes.number,\n    CompanyName: PropTypes.string,\n    ModelId: PropTypes.number,\n    ModelName: PropTypes.string,\n    Rating: PropTypes.number,\n    VersionId: PropTypes.number,\n    ImageUrl: PropTypes.string,\n    VersionName: PropTypes.string,\n    Price: PropTypes.number\n  }) || PropTypes.arrayOf(PropTypes.shape({\n    locations: PropTypes.string\n  }))),\n  popUpVisible: PropTypes.bool\n\n}\n\n\n\nexport default CommonPopUp;\n\n\nexport const CommonPopUpConnect = connect(mapStateToProps, mapDispatchToProps)(CommonPopUp);\n"]},"metadata":{},"sourceType":"module"}