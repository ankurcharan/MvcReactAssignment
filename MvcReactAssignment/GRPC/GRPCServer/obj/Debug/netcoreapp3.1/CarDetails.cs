// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/carDetails.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GRPCServer {

  /// <summary>Holder for reflection information generated from Protos/carDetails.proto</summary>
  public static partial class CarDetailsReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/carDetails.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CarDetailsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90b3MvY2FyRGV0YWlscy5wcm90bxIHZGV0YWlscyIJCgduZXdjaXR5",
            "Ii4KC2NpdGllc01vZGVsEh8KBmNpdGllcxgBIAMoCzIPLmRldGFpbHMuY2l0",
            "aWVzIjcKDExpc3RWZXJzaW9ucxInCgpkYlZlcnNpb25zGAEgAygLMhMuZGV0",
            "YWlscy5kYlZlcnNpb25zIjEKCkxpc3RNb2RlbHMSIwoIZGJNb2RlbHMYASAD",
            "KAsyES5kZXRhaWxzLmRiTW9kZWxzIi0KCkxpc3RDaXRpZXMSHwoGZGJDaXR5",
            "GAEgAygLMg8uZGV0YWlscy5kYkNpdHkiFgoGZGJDaXR5EgwKBGNpdHkYASAB",
            "KAkiFwoHY2FyTmFtZRIMCgRuYW1lGAEgASgJIhsKBmNvbXBJZBIRCgljb21w",
            "YW55SWQYASABKAUiLwoJVmVyc2lvbklkEhEKCWNvbXBhbnlJZBgBIAEoBRIP",
            "Cgdtb2RlbElkGAIgASgFIlAKCGRiTW9kZWxzEg8KB01vZGVsSWQYASABKAUS",
            "EQoJTW9kZWxOYW1lGAIgASgJEg4KBlJhdGluZxgDIAEoBRIQCghJbWFnZVVy",
            "bBgEIAEoCSKxAQoKZGJWZXJzaW9ucxIRCglDb21wYW55SWQYASABKAUSEwoL",
            "Q29tcGFueU5hbWUYAiABKAkSDwoHTW9kZWxJZBgDIAEoBRIRCglNb2RlbE5h",
            "bWUYBCABKAkSDgoGUmF0aW5nGAUgASgFEhEKCVZlcnNpb25JZBgGIAEoBRIQ",
            "CghJbWFnZVVybBgHIAEoCRITCgtWZXJzaW9uTmFtZRgIIAEoCRINCgVQcmlj",
            "ZRgJIAEoBSKkAgoJbW9kZWxEYXRhEg0KBWNhcklkGAEgASgFEhAKCG1ha2VO",
            "YW1lGAIgASgJEhEKCW1vZGVsTmFtZRgDIAEoCRIPCgdjYXJOYW1lGAQgASgJ",
            "EhQKDGF2ZXJhZ2VQcmljZRgFIAEoBRIPCgdtaWxlYWdlGAYgASgJEg4KBmVu",
            "Z2luZRgHIAEoCRIUCgx0cmFuc21pc3Npb24YCCABKAkSEAoIZnVlbFR5cGUY",
            "CSABKAkSFwoPc2VhdGluZ0NhcGFjaXR5GAogASgFEg4KBmltZ1VybBgLIAEo",
            "CRImCgh2ZXJzaW9ucxgMIAMoCzIULmRldGFpbHMuY2FyVmVyc2lvbnMSIgoJ",
            "bmV3Q2l0aWVzGA0gAygLMg8uZGV0YWlscy5jaXRpZXMiRQoLY2FyVmVyc2lv",
            "bnMSDQoFY2FySWQYASABKAUSEgoKY2FyVmVyc2lvbhgCIAEoCRITCgtvblJv",
            "YWRQcmljZRgDIAEoBSIiCgZjaXRpZXMSCgoCaWQYASABKAUSDAoEY2l0eRgC",
            "IAEoCTKiAgoKY2FyRGV0YWlscxIyCgpnZXREZXRhaWxzEhAuZGV0YWlscy5j",
            "YXJOYW1lGhIuZGV0YWlscy5tb2RlbERhdGESMwoJZ2V0Q2l0aWVzEhAuZGV0",
            "YWlscy5uZXdjaXR5GhQuZGV0YWlscy5jaXRpZXNNb2RlbBI2Cg1nZXRDaXRp",
            "ZXNMaXN0EhAuZGV0YWlscy5uZXdjaXR5GhMuZGV0YWlscy5MaXN0Q2l0aWVz",
            "EjwKD2dldFZlcnNpb25zTGlzdBISLmRldGFpbHMuVmVyc2lvbklkGhUuZGV0",
            "YWlscy5MaXN0VmVyc2lvbnMSNQoNZ2V0TW9kZWxzTGlzdBIPLmRldGFpbHMu",
            "Y29tcElkGhMuZGV0YWlscy5MaXN0TW9kZWxzQg2qAgpHUlBDU2VydmVyYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.newcity), global::GRPCServer.newcity.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.citiesModel), global::GRPCServer.citiesModel.Parser, new[]{ "Cities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.ListVersions), global::GRPCServer.ListVersions.Parser, new[]{ "DbVersions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.ListModels), global::GRPCServer.ListModels.Parser, new[]{ "DbModels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.ListCities), global::GRPCServer.ListCities.Parser, new[]{ "DbCity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.dbCity), global::GRPCServer.dbCity.Parser, new[]{ "City" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.carName), global::GRPCServer.carName.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.compId), global::GRPCServer.compId.Parser, new[]{ "CompanyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.VersionId), global::GRPCServer.VersionId.Parser, new[]{ "CompanyId", "ModelId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.dbModels), global::GRPCServer.dbModels.Parser, new[]{ "ModelId", "ModelName", "Rating", "ImageUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.dbVersions), global::GRPCServer.dbVersions.Parser, new[]{ "CompanyId", "CompanyName", "ModelId", "ModelName", "Rating", "VersionId", "ImageUrl", "VersionName", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.modelData), global::GRPCServer.modelData.Parser, new[]{ "CarId", "MakeName", "ModelName", "CarName", "AveragePrice", "Mileage", "Engine", "Transmission", "FuelType", "SeatingCapacity", "ImgUrl", "Versions", "NewCities" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.carVersions), global::GRPCServer.carVersions.Parser, new[]{ "CarId", "CarVersion", "OnRoadPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCServer.cities), global::GRPCServer.cities.Parser, new[]{ "Id", "City" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class newcity : pb::IMessage<newcity> {
    private static readonly pb::MessageParser<newcity> _parser = new pb::MessageParser<newcity>(() => new newcity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<newcity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public newcity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public newcity(newcity other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public newcity Clone() {
      return new newcity(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as newcity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(newcity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(newcity other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class citiesModel : pb::IMessage<citiesModel> {
    private static readonly pb::MessageParser<citiesModel> _parser = new pb::MessageParser<citiesModel>(() => new citiesModel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<citiesModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public citiesModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public citiesModel(citiesModel other) : this() {
      cities_ = other.cities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public citiesModel Clone() {
      return new citiesModel(this);
    }

    /// <summary>Field number for the "cities" field.</summary>
    public const int CitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GRPCServer.cities> _repeated_cities_codec
        = pb::FieldCodec.ForMessage(10, global::GRPCServer.cities.Parser);
    private readonly pbc::RepeatedField<global::GRPCServer.cities> cities_ = new pbc::RepeatedField<global::GRPCServer.cities>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCServer.cities> Cities {
      get { return cities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as citiesModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(citiesModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cities_.Equals(other.cities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cities_.WriteTo(output, _repeated_cities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cities_.CalculateSize(_repeated_cities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(citiesModel other) {
      if (other == null) {
        return;
      }
      cities_.Add(other.cities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cities_.AddEntriesFrom(input, _repeated_cities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListVersions : pb::IMessage<ListVersions> {
    private static readonly pb::MessageParser<ListVersions> _parser = new pb::MessageParser<ListVersions>(() => new ListVersions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListVersions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVersions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVersions(ListVersions other) : this() {
      dbVersions_ = other.dbVersions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVersions Clone() {
      return new ListVersions(this);
    }

    /// <summary>Field number for the "dbVersions" field.</summary>
    public const int DbVersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GRPCServer.dbVersions> _repeated_dbVersions_codec
        = pb::FieldCodec.ForMessage(10, global::GRPCServer.dbVersions.Parser);
    private readonly pbc::RepeatedField<global::GRPCServer.dbVersions> dbVersions_ = new pbc::RepeatedField<global::GRPCServer.dbVersions>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCServer.dbVersions> DbVersions {
      get { return dbVersions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListVersions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListVersions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dbVersions_.Equals(other.dbVersions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dbVersions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dbVersions_.WriteTo(output, _repeated_dbVersions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dbVersions_.CalculateSize(_repeated_dbVersions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListVersions other) {
      if (other == null) {
        return;
      }
      dbVersions_.Add(other.dbVersions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dbVersions_.AddEntriesFrom(input, _repeated_dbVersions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListModels : pb::IMessage<ListModels> {
    private static readonly pb::MessageParser<ListModels> _parser = new pb::MessageParser<ListModels>(() => new ListModels());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListModels> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModels() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModels(ListModels other) : this() {
      dbModels_ = other.dbModels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModels Clone() {
      return new ListModels(this);
    }

    /// <summary>Field number for the "dbModels" field.</summary>
    public const int DbModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GRPCServer.dbModels> _repeated_dbModels_codec
        = pb::FieldCodec.ForMessage(10, global::GRPCServer.dbModels.Parser);
    private readonly pbc::RepeatedField<global::GRPCServer.dbModels> dbModels_ = new pbc::RepeatedField<global::GRPCServer.dbModels>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCServer.dbModels> DbModels {
      get { return dbModels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListModels);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListModels other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dbModels_.Equals(other.dbModels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dbModels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dbModels_.WriteTo(output, _repeated_dbModels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dbModels_.CalculateSize(_repeated_dbModels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListModels other) {
      if (other == null) {
        return;
      }
      dbModels_.Add(other.dbModels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dbModels_.AddEntriesFrom(input, _repeated_dbModels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCities : pb::IMessage<ListCities> {
    private static readonly pb::MessageParser<ListCities> _parser = new pb::MessageParser<ListCities>(() => new ListCities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCities(ListCities other) : this() {
      dbCity_ = other.dbCity_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCities Clone() {
      return new ListCities(this);
    }

    /// <summary>Field number for the "dbCity" field.</summary>
    public const int DbCityFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GRPCServer.dbCity> _repeated_dbCity_codec
        = pb::FieldCodec.ForMessage(10, global::GRPCServer.dbCity.Parser);
    private readonly pbc::RepeatedField<global::GRPCServer.dbCity> dbCity_ = new pbc::RepeatedField<global::GRPCServer.dbCity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCServer.dbCity> DbCity {
      get { return dbCity_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dbCity_.Equals(other.dbCity_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dbCity_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dbCity_.WriteTo(output, _repeated_dbCity_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dbCity_.CalculateSize(_repeated_dbCity_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCities other) {
      if (other == null) {
        return;
      }
      dbCity_.Add(other.dbCity_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dbCity_.AddEntriesFrom(input, _repeated_dbCity_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class dbCity : pb::IMessage<dbCity> {
    private static readonly pb::MessageParser<dbCity> _parser = new pb::MessageParser<dbCity>(() => new dbCity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<dbCity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbCity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbCity(dbCity other) : this() {
      city_ = other.city_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbCity Clone() {
      return new dbCity(this);
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 1;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as dbCity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(dbCity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (City != other.City) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (City.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(City);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(dbCity other) {
      if (other == null) {
        return;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            City = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class carName : pb::IMessage<carName> {
    private static readonly pb::MessageParser<carName> _parser = new pb::MessageParser<carName>(() => new carName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<carName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public carName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public carName(carName other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public carName Clone() {
      return new carName(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as carName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(carName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(carName other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class compId : pb::IMessage<compId> {
    private static readonly pb::MessageParser<compId> _parser = new pb::MessageParser<compId>(() => new compId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<compId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public compId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public compId(compId other) : this() {
      companyId_ = other.companyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public compId Clone() {
      return new compId(this);
    }

    /// <summary>Field number for the "companyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private int companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as compId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(compId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(compId other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionId : pb::IMessage<VersionId> {
    private static readonly pb::MessageParser<VersionId> _parser = new pb::MessageParser<VersionId>(() => new VersionId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionId(VersionId other) : this() {
      companyId_ = other.companyId_;
      modelId_ = other.modelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionId Clone() {
      return new VersionId(this);
    }

    /// <summary>Field number for the "companyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private int companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (ModelId != other.ModelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionId other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class dbModels : pb::IMessage<dbModels> {
    private static readonly pb::MessageParser<dbModels> _parser = new pb::MessageParser<dbModels>(() => new dbModels());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<dbModels> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbModels() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbModels(dbModels other) : this() {
      modelId_ = other.modelId_;
      modelName_ = other.modelName_;
      rating_ = other.rating_;
      imageUrl_ = other.imageUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbModels Clone() {
      return new dbModels(this);
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 1;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 2;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rating" field.</summary>
    public const int RatingFieldNumber = 3;
    private int rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "ImageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 4;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as dbModels);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(dbModels other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelId != other.ModelId) return false;
      if (ModelName != other.ModelName) return false;
      if (Rating != other.Rating) return false;
      if (ImageUrl != other.ImageUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModelId);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelName);
      }
      if (Rating != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rating);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ImageUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rating);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(dbModels other) {
      if (other == null) {
        return;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ModelId = input.ReadInt32();
            break;
          }
          case 18: {
            ModelName = input.ReadString();
            break;
          }
          case 24: {
            Rating = input.ReadInt32();
            break;
          }
          case 34: {
            ImageUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class dbVersions : pb::IMessage<dbVersions> {
    private static readonly pb::MessageParser<dbVersions> _parser = new pb::MessageParser<dbVersions>(() => new dbVersions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<dbVersions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbVersions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbVersions(dbVersions other) : this() {
      companyId_ = other.companyId_;
      companyName_ = other.companyName_;
      modelId_ = other.modelId_;
      modelName_ = other.modelName_;
      rating_ = other.rating_;
      versionId_ = other.versionId_;
      imageUrl_ = other.imageUrl_;
      versionName_ = other.versionName_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public dbVersions Clone() {
      return new dbVersions(this);
    }

    /// <summary>Field number for the "CompanyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private int companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "CompanyName" field.</summary>
    public const int CompanyNameFieldNumber = 2;
    private string companyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyName {
      get { return companyName_; }
      set {
        companyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelId" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 4;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rating" field.</summary>
    public const int RatingFieldNumber = 5;
    private int rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "VersionId" field.</summary>
    public const int VersionIdFieldNumber = 6;
    private int versionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionId {
      get { return versionId_; }
      set {
        versionId_ = value;
      }
    }

    /// <summary>Field number for the "ImageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 7;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VersionName" field.</summary>
    public const int VersionNameFieldNumber = 8;
    private string versionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionName {
      get { return versionName_; }
      set {
        versionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 9;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as dbVersions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(dbVersions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (CompanyName != other.CompanyName) return false;
      if (ModelId != other.ModelId) return false;
      if (ModelName != other.ModelName) return false;
      if (Rating != other.Rating) return false;
      if (VersionId != other.VersionId) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (VersionName != other.VersionName) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      if (CompanyName.Length != 0) hash ^= CompanyName.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      if (VersionId != 0) hash ^= VersionId.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (VersionName.Length != 0) hash ^= VersionName.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      if (CompanyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompanyName);
      }
      if (ModelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelId);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelName);
      }
      if (Rating != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rating);
      }
      if (VersionId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VersionId);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImageUrl);
      }
      if (VersionName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VersionName);
      }
      if (Price != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      if (CompanyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyName);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rating);
      }
      if (VersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionId);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (VersionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionName);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(dbVersions other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.CompanyName.Length != 0) {
        CompanyName = other.CompanyName;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
      if (other.VersionId != 0) {
        VersionId = other.VersionId;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.VersionName.Length != 0) {
        VersionName = other.VersionName;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 18: {
            CompanyName = input.ReadString();
            break;
          }
          case 24: {
            ModelId = input.ReadInt32();
            break;
          }
          case 34: {
            ModelName = input.ReadString();
            break;
          }
          case 40: {
            Rating = input.ReadInt32();
            break;
          }
          case 48: {
            VersionId = input.ReadInt32();
            break;
          }
          case 58: {
            ImageUrl = input.ReadString();
            break;
          }
          case 66: {
            VersionName = input.ReadString();
            break;
          }
          case 72: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class modelData : pb::IMessage<modelData> {
    private static readonly pb::MessageParser<modelData> _parser = new pb::MessageParser<modelData>(() => new modelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<modelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public modelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public modelData(modelData other) : this() {
      carId_ = other.carId_;
      makeName_ = other.makeName_;
      modelName_ = other.modelName_;
      carName_ = other.carName_;
      averagePrice_ = other.averagePrice_;
      mileage_ = other.mileage_;
      engine_ = other.engine_;
      transmission_ = other.transmission_;
      fuelType_ = other.fuelType_;
      seatingCapacity_ = other.seatingCapacity_;
      imgUrl_ = other.imgUrl_;
      versions_ = other.versions_.Clone();
      newCities_ = other.newCities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public modelData Clone() {
      return new modelData(this);
    }

    /// <summary>Field number for the "carId" field.</summary>
    public const int CarIdFieldNumber = 1;
    private int carId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarId {
      get { return carId_; }
      set {
        carId_ = value;
      }
    }

    /// <summary>Field number for the "makeName" field.</summary>
    public const int MakeNameFieldNumber = 2;
    private string makeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modelName" field.</summary>
    public const int ModelNameFieldNumber = 3;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carName" field.</summary>
    public const int CarNameFieldNumber = 4;
    private string carName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarName {
      get { return carName_; }
      set {
        carName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "averagePrice" field.</summary>
    public const int AveragePriceFieldNumber = 5;
    private int averagePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AveragePrice {
      get { return averagePrice_; }
      set {
        averagePrice_ = value;
      }
    }

    /// <summary>Field number for the "mileage" field.</summary>
    public const int MileageFieldNumber = 6;
    private string mileage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mileage {
      get { return mileage_; }
      set {
        mileage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 7;
    private string engine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Engine {
      get { return engine_; }
      set {
        engine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transmission" field.</summary>
    public const int TransmissionFieldNumber = 8;
    private string transmission_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Transmission {
      get { return transmission_; }
      set {
        transmission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fuelType" field.</summary>
    public const int FuelTypeFieldNumber = 9;
    private string fuelType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FuelType {
      get { return fuelType_; }
      set {
        fuelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatingCapacity" field.</summary>
    public const int SeatingCapacityFieldNumber = 10;
    private int seatingCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatingCapacity {
      get { return seatingCapacity_; }
      set {
        seatingCapacity_ = value;
      }
    }

    /// <summary>Field number for the "imgUrl" field.</summary>
    public const int ImgUrlFieldNumber = 11;
    private string imgUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgUrl {
      get { return imgUrl_; }
      set {
        imgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::GRPCServer.carVersions> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(98, global::GRPCServer.carVersions.Parser);
    private readonly pbc::RepeatedField<global::GRPCServer.carVersions> versions_ = new pbc::RepeatedField<global::GRPCServer.carVersions>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCServer.carVersions> Versions {
      get { return versions_; }
    }

    /// <summary>Field number for the "newCities" field.</summary>
    public const int NewCitiesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::GRPCServer.cities> _repeated_newCities_codec
        = pb::FieldCodec.ForMessage(106, global::GRPCServer.cities.Parser);
    private readonly pbc::RepeatedField<global::GRPCServer.cities> newCities_ = new pbc::RepeatedField<global::GRPCServer.cities>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCServer.cities> NewCities {
      get { return newCities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as modelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(modelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarId != other.CarId) return false;
      if (MakeName != other.MakeName) return false;
      if (ModelName != other.ModelName) return false;
      if (CarName != other.CarName) return false;
      if (AveragePrice != other.AveragePrice) return false;
      if (Mileage != other.Mileage) return false;
      if (Engine != other.Engine) return false;
      if (Transmission != other.Transmission) return false;
      if (FuelType != other.FuelType) return false;
      if (SeatingCapacity != other.SeatingCapacity) return false;
      if (ImgUrl != other.ImgUrl) return false;
      if(!versions_.Equals(other.versions_)) return false;
      if(!newCities_.Equals(other.newCities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarId != 0) hash ^= CarId.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (CarName.Length != 0) hash ^= CarName.GetHashCode();
      if (AveragePrice != 0) hash ^= AveragePrice.GetHashCode();
      if (Mileage.Length != 0) hash ^= Mileage.GetHashCode();
      if (Engine.Length != 0) hash ^= Engine.GetHashCode();
      if (Transmission.Length != 0) hash ^= Transmission.GetHashCode();
      if (FuelType.Length != 0) hash ^= FuelType.GetHashCode();
      if (SeatingCapacity != 0) hash ^= SeatingCapacity.GetHashCode();
      if (ImgUrl.Length != 0) hash ^= ImgUrl.GetHashCode();
      hash ^= versions_.GetHashCode();
      hash ^= newCities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CarId);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MakeName);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelName);
      }
      if (CarName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CarName);
      }
      if (AveragePrice != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AveragePrice);
      }
      if (Mileage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Mileage);
      }
      if (Engine.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Engine);
      }
      if (Transmission.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Transmission);
      }
      if (FuelType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FuelType);
      }
      if (SeatingCapacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SeatingCapacity);
      }
      if (ImgUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ImgUrl);
      }
      versions_.WriteTo(output, _repeated_versions_codec);
      newCities_.WriteTo(output, _repeated_newCities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarId);
      }
      if (MakeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (CarName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarName);
      }
      if (AveragePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AveragePrice);
      }
      if (Mileage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mileage);
      }
      if (Engine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Engine);
      }
      if (Transmission.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Transmission);
      }
      if (FuelType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FuelType);
      }
      if (SeatingCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatingCapacity);
      }
      if (ImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgUrl);
      }
      size += versions_.CalculateSize(_repeated_versions_codec);
      size += newCities_.CalculateSize(_repeated_newCities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(modelData other) {
      if (other == null) {
        return;
      }
      if (other.CarId != 0) {
        CarId = other.CarId;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.CarName.Length != 0) {
        CarName = other.CarName;
      }
      if (other.AveragePrice != 0) {
        AveragePrice = other.AveragePrice;
      }
      if (other.Mileage.Length != 0) {
        Mileage = other.Mileage;
      }
      if (other.Engine.Length != 0) {
        Engine = other.Engine;
      }
      if (other.Transmission.Length != 0) {
        Transmission = other.Transmission;
      }
      if (other.FuelType.Length != 0) {
        FuelType = other.FuelType;
      }
      if (other.SeatingCapacity != 0) {
        SeatingCapacity = other.SeatingCapacity;
      }
      if (other.ImgUrl.Length != 0) {
        ImgUrl = other.ImgUrl;
      }
      versions_.Add(other.versions_);
      newCities_.Add(other.newCities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CarId = input.ReadInt32();
            break;
          }
          case 18: {
            MakeName = input.ReadString();
            break;
          }
          case 26: {
            ModelName = input.ReadString();
            break;
          }
          case 34: {
            CarName = input.ReadString();
            break;
          }
          case 40: {
            AveragePrice = input.ReadInt32();
            break;
          }
          case 50: {
            Mileage = input.ReadString();
            break;
          }
          case 58: {
            Engine = input.ReadString();
            break;
          }
          case 66: {
            Transmission = input.ReadString();
            break;
          }
          case 74: {
            FuelType = input.ReadString();
            break;
          }
          case 80: {
            SeatingCapacity = input.ReadInt32();
            break;
          }
          case 90: {
            ImgUrl = input.ReadString();
            break;
          }
          case 98: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
          case 106: {
            newCities_.AddEntriesFrom(input, _repeated_newCities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class carVersions : pb::IMessage<carVersions> {
    private static readonly pb::MessageParser<carVersions> _parser = new pb::MessageParser<carVersions>(() => new carVersions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<carVersions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public carVersions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public carVersions(carVersions other) : this() {
      carId_ = other.carId_;
      carVersion_ = other.carVersion_;
      onRoadPrice_ = other.onRoadPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public carVersions Clone() {
      return new carVersions(this);
    }

    /// <summary>Field number for the "carId" field.</summary>
    public const int CarIdFieldNumber = 1;
    private int carId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarId {
      get { return carId_; }
      set {
        carId_ = value;
      }
    }

    /// <summary>Field number for the "carVersion" field.</summary>
    public const int CarVersionFieldNumber = 2;
    private string carVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarVersion {
      get { return carVersion_; }
      set {
        carVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onRoadPrice" field.</summary>
    public const int OnRoadPriceFieldNumber = 3;
    private int onRoadPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnRoadPrice {
      get { return onRoadPrice_; }
      set {
        onRoadPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as carVersions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(carVersions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarId != other.CarId) return false;
      if (CarVersion != other.CarVersion) return false;
      if (OnRoadPrice != other.OnRoadPrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarId != 0) hash ^= CarId.GetHashCode();
      if (CarVersion.Length != 0) hash ^= CarVersion.GetHashCode();
      if (OnRoadPrice != 0) hash ^= OnRoadPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CarId);
      }
      if (CarVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CarVersion);
      }
      if (OnRoadPrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OnRoadPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarId);
      }
      if (CarVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarVersion);
      }
      if (OnRoadPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnRoadPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(carVersions other) {
      if (other == null) {
        return;
      }
      if (other.CarId != 0) {
        CarId = other.CarId;
      }
      if (other.CarVersion.Length != 0) {
        CarVersion = other.CarVersion;
      }
      if (other.OnRoadPrice != 0) {
        OnRoadPrice = other.OnRoadPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CarId = input.ReadInt32();
            break;
          }
          case 18: {
            CarVersion = input.ReadString();
            break;
          }
          case 24: {
            OnRoadPrice = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class cities : pb::IMessage<cities> {
    private static readonly pb::MessageParser<cities> _parser = new pb::MessageParser<cities>(() => new cities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<cities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCServer.CarDetailsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cities(cities other) : this() {
      id_ = other.id_;
      city_ = other.city_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cities Clone() {
      return new cities(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 2;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as cities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(cities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (City != other.City) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (City.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(City);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(cities other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            City = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
